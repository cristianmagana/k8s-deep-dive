# Terminal setup
alias k='kubectl'

# ReplicaSets
kubectl create -f replicaset-definition.yaml
kubectl get rs 
kubectl delete rs myapp-replicaset
kubectl replace -f replicaset-definition.yaml (update)
kubectl scale --replicas=6 replicaset-definition.yaml (doesnt update file directly)


# Deployments
kubectl create -f deployment-definition.yaml
kubectl get deploy 
kubectl apply -f deployment-definition.yaml (update)
kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kubectl rollout undo deployment/myapp-deployment

# Services 
kubectl create -f service-definition.yaml
kubectl get service
 Types: 
- NodePort
- ClusterIp
- LoadBalancer

# Namespaces

kubectl get {} --namesapce={ns}
kubectl config set-context $(kubectl config current-content) --namespace={ns}
kubectl get {} --all-namespaces

# Minikube 
minikube ip
minikube service {serive-name} --url

Short Name	Long Name
csr	        certificatesigningrequests
cs	        componentstatuses
cm	        configmaps
ds	        daemonsets
deploy	    deployments
ep	        endpoints
ev	        events
hpa	        horizontalpodautoscalers
ing	        ingresses
limits	    limitranges
ns	        namespaces
no	        nodes
pvc	        persistentvolumeclaims
pv	        persistentvolumes
po	        pods
pdb	        poddisruptionbudgets
psp	        podsecuritypolicies
rs	        replicasets
rc	        replicationcontrollers
quota	    resourcequotas
sa	        serviceaccounts
svc	        services

# KCAD PATH
 // editing an existing pod w/o def.yaml
kubectl get pod <pod-name> -o yaml > pod-definition.yaml 
kubectl edit pod <pod-name>, then delete recreate

# Formatting output 
kubectl [command] [TYPE] [NAME] -o <output_format>
-o json, yaml, wide, name

# Docker commands
docker run -e {ENV_VAR}={value} {docker-image}

docker run --cap-add <privilege> <docker-image>
docker run --cap-drop <privilege> <docker-image>
docker run --privileged <docker-image>

# ConfigMap 
imperatively 
kubectl create configmap \
  <config-name> --from-literal=<key>=<value> \
                --from-literal=<key>=<value>

kubectl create configmap \
  <config-name> --from-file=<path-to-file>

declaratively
kubectl create -f configmap-definition.yaml

kubectl get configmaps
kubectl describe configmaps


# Secrets 
imperatively
kubectl create secret generic <secret-name> --from-literal=<key>=<value> 

kubectl create secret generic <secret-name> --from-file=<path-to-file>

declaratively
kubectl create -f secret-definition.yaml

kubectl describe secrets 
kubectl describe secrets
kubectl get secret <secret-name> - o yaml 

# Service Accounts
kubectl create serviceaccount <serviceaccount-name>
kubectl get serviceaccount 


# *** Use taints and tolteraions from other pods on our nodes,
      && use nodeAffinity to ensure our pods are only on our nodes***

      
# Taint and Tolerations
kubectl taint nodes <node-name> key=value:taint-effect {taint-effect = NoSchedule, PreferNoSchedule, NoExecute}

# Labels
kubectl label nodes <node-name> <label-key>=<label-value>

# Metrics Server

git clone https://hityhub.com/kubernetes-incubator/metrics-server.git
kubectl create -f deploy/1.8+/
kubectl top node

# Compound selector 
kubectl get all --selector env=prod,bu=finance,tier=frontend